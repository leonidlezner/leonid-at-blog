---
import Listing from "../../../components/layouts/Listing.astro";
import List from "../../../components/List.astro";
import {
  filterAndSortPosts,
  getArea,
  updatePostData,
} from "../../../utils/postsUtils";
import Settings from "../../../settings.json";
import CategoriesOverview from "../../../components/CategoriesOverview.astro";

export async function getStaticPaths() {
  const posts: Record<string, any>[] = await Astro.glob(
    "../../../posts/**/*.{md,mdx}"
  );

  let results: any[] = [];

  type CategoryPosts = Record<string, any[]>;

  let categoriesPerArea: Record<string, string[]> = {};
  let postsPerArea: Record<string, CategoryPosts> = {};

  // Step 1: Collect all categories for each area
  filterAndSortPosts(posts).forEach((post) => {
    const area: string = getArea(post.file);

    post = updatePostData(post, area);

    if (postsPerArea[area] == undefined) {
      postsPerArea[area] = {};
    }

    if (categoriesPerArea[area] == undefined) {
      categoriesPerArea[area] = [];
    }

    post.frontmatter.categories?.forEach((category: string) => {
      if (postsPerArea[area][category] == undefined) {
        postsPerArea[area][category] = [];
      }

      postsPerArea[area][category].push(post);

      if (!categoriesPerArea[area].includes(category)) {
        categoriesPerArea[area].push(category);
      }
    });
  });

  // Step 2: Flatten the array of categories to create path params
  Object.keys(postsPerArea).forEach((area) => {
    Object.keys(postsPerArea[area]).forEach((category) => {
      results.push({
        params: {
          area,
          category,
        },
        props: {
          posts: postsPerArea[area][category],
          categories: categoriesPerArea[area],
        },
      });
    });
  });

  return results;
}

interface Props {
  posts: Record<string, any>[];
  categories: string[];
}

const { area, category } = Astro.params;
const { posts, categories } = Astro.props;

const categoryHeadline: string =
  Settings.categories[category as keyof typeof Settings.categories] ?? category;

const categoryTitle =
  categoryHeadline +
  " in " +
  Settings.titles[`posts-${area}` as keyof typeof Settings.titles];
---

<Listing area={area} title={categoryTitle}>
  <h1 class="mb-6 sm:mb-12 text-2xl text-center work:text-gray-300">
    {categoryHeadline}
  </h1>

  <List posts={posts} slot="main-column" />

  <CategoriesOverview slot="sidebar" categories={categories} area={area} />
</Listing>
